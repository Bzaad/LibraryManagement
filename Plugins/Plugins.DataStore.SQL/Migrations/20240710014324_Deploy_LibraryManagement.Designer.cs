// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Plugins.DataStore.SQL;

#nullable disable

namespace Plugins.DataStore.SQL.Migrations
{
    [DbContext(typeof(LibraryContext))]
    [Migration("20240710014324_Deploy_LibraryManagement")]
    partial class Deploy_LibraryManagement
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CoreBusiness.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AvailableCopies")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailableCopies = 4,
                            CategoryId = 1,
                            Description = "Novel by Ernest Hemingway",
                            Name = "A Farewell to Arms"
                        },
                        new
                        {
                            Id = 2,
                            AvailableCopies = 3,
                            CategoryId = 1,
                            Description = "Novel by Douglas Adams",
                            Name = "The Hitchhiker's Guide to the Galaxy"
                        },
                        new
                        {
                            Id = 3,
                            AvailableCopies = 5,
                            CategoryId = 1,
                            Description = "Novel by Gabriel García Marquez",
                            Name = "One Hundred Years of Solitude"
                        },
                        new
                        {
                            Id = 4,
                            AvailableCopies = 2,
                            CategoryId = 2,
                            Description = "Book by Steven Pinker",
                            Name = "The Language Instinct"
                        },
                        new
                        {
                            Id = 5,
                            AvailableCopies = 2,
                            CategoryId = 2,
                            Description = "Book by Stephen Hawking",
                            Name = "A Brief History of Time"
                        },
                        new
                        {
                            Id = 6,
                            AvailableCopies = 1,
                            CategoryId = 2,
                            Description = "Book by  Jared Diamond",
                            Name = "Guns, Germs, and Steel"
                        });
                });

            modelBuilder.Entity("CoreBusiness.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Fiction Books",
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Description = "None-fiction Books",
                            Name = "Non-fiction"
                        });
                });

            modelBuilder.Entity("CoreBusiness.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookId")
                        .HasColumnType("int");

                    b.Property<string>("BookName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateBorrowed")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateShouldBeReturned")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("CoreBusiness.Book", b =>
                {
                    b.HasOne("CoreBusiness.Category", "Category")
                        .WithMany("Books")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("CoreBusiness.Category", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
